#+TITLE: Context Lite

Context Lite is a Common Lisp library for writing generic functions and methods that specialize on
special/dynamic variables. For instance, if you are writing a method that should behave differently
on Monday, but you do not wish to pass the day of the week as an explicit argument:

#+BEGIN_SRC lisp
      (defmethod* motd () ()
        "It's boring today.")
      (defmethod* motd () ((*day-of-week* (eql 'monday))
        "It's Monday!!!")

      (let ((*day-of-week* 'monday))
        (motd) ; => "It's Monday!!!"
        )
#+END_SRC

Context Lite is in the same vein as [[https://github.com/pcostanza/contextl][ContextL]], but focuses only on generic functions and methods, not
class slots or anything else. Additionally, Context Lite thinks in terms of special variables, while
ContextL uses "layers", which are less natural in my opinion.

A major feature of Context Lite is that ~defmethod*~ forms can specialize on special variables that
were not mentioned in ~defgeneric*~ or any previous ~defmethod*~. Thus, a library author who is
exporting a Context Lite generic function need not know which special variables the library's
consumers will specialize on.

Context Lite methods can handle a mix of "normal" arguments and special variables, with separate
precedence orders.

* Installation
  TODO. For now, copy ~context-lite.lisp~ into your source tree.
* Usage
  Pulled from ~tests.lisp~:

  #+BEGIN_SRC lisp
    (defvar *indicator* nil)

    (defmethod* do-the-thing (a) ()
      0)
    (defmethod* do-the-thing (a) ((*indicator* (eql :active)))
      1)
    (defmethod* do-the-thing ((a string)) ((*indicator* number))
      2)

    (is (= 0 (do-the-thing "hello")))
    (is (= 0 (let ((*indicator* 42)) (do-the-thing 999))))
    (is (= 1 (let ((*indicator* :active)) (do-the-thing 5))))
    (is (= 2 (let ((*indicator* 42)) (do-the-thing "heyhi"))))
  #+END_SRC

  Here's another example, demonstrating custom precedence order among the special variable
  arguments:

  #+BEGIN_SRC lisp
    (defvar *a* nil)
    (defvar *b* nil)

    (defmethod* do-the-thing () ((*a* (eql 42)))
      0)
    (defmethod* do-the-thing () ((*b* (eql 42)))
      1)

    (is (= 0 (let ((*a* 42) (*b* 42)) (do-the-thing))))

    (defgeneric* do-the-thing () (:special-variable-precedence-order *b* *a*))

    (is (= 1 (let ((*a* 42) (*b* 42)) (do-the-thing)))))
  #+END_SRC

  ~generic*~ functions can specialize on both normal arguments and on special variables. In this
  case, ~:argument-precedence-order~ and ~:special-variable-precedence-order~ can be supplied
  separately. Normal arguments always get precedence over any special variable.

  Look in ~tests.lisp~ to get a better feel for everything Context Lite can do.
#   Here's an example of how failing to specify the argument precedence can lead to problems:

#   #+BEGIN_SRC lisp
#     (defclass user () ())
#     (defclass admin-user (user) ())

#     (defmethod* colors-alist () ()
#       '((background . "white")
#         (text . "black")
#         (restricted-links . "gray")))

#     (defmethod* colors-alist () ((*logged-in-user* user))
#       "Logged in users who are not admins should have red links"
#       '((background . "white")
#         (text . "black")
#         (restricted-links . "red")))

#     (defmethod* colors-alist () ((*logged-in-user* admin-user))
#       "Admin users should have blue links to restricted parts of the site"
#       (cons '(restricted-links . "blue")
#             (call-next-method)))

#     (defmethod* colors-alist () ((*color-scheme* (eql 'dark)))
#       (append '((background . "black")
#                 (text . "white"))
#               (call-next-method))
#   #+END_SRC

#   The first method to be defined on ~colors-alist~ specializes on ~*logged-in-user*~, so
#   ~*logged-in-user*~ is placed before ~*color-scheme*~ in the argument precedence list. When an
#   admin user with a dark color scheme loads the site, the ~admin-user~ method will run, followed by
#   the ~user~ method, but the ~(eql 'dark)~ method won't run!

#   The quickest way to fix this is to add a ~defgeneric*~ form that puts ~*color-scheme*~ at a higher
#   precedence, but here's a more elegant way that doesn't depend on precedence at all:

#   #+BEGIN_SRC lisp
#     (defclass user () ())
#     (defclass admin-user (user) ())

#     (defmethod* colors-alist () ()
#       '((background . "white")
#         (text . "black")
#         (restricted-links . "gray")))

#     (defmethod* colors-alist () ((*logged-in-user* user))
#       "Logged in users who are not admins should have red links"
#       (cons '(restricted-links . "red")
#             (call-next-method)))

#     (defmethod* colors-alist () ((*logged-in-user* admin-user))
#       "Admin users should have blue links to restricted parts of the site"
#       (cons '(restricted-links . "blue")
#             (call-next-method)))

#     (defmethod* colors-alist () ((*color-scheme* (eql 'dark)))
#       (append '((background . "black")
#                 (text . "white"))
#               (call-next-method))
#   #+END_SRC

#   Note that it does not matter here which order of precedence the different arguments get. If an
#   admin user has a dark color scheme, it does not matter whether the dark or admin method runs
#   before the other.

#   Precedence issues are not unique to Context Lite, but they're more insidious since methods might
#   not list all the special variables that /other/ methods specialize on in their lambda lists.
* Performance
  As you'd expect, Context Lite internally uses CLOS' method dispatch, so performance should be
  pretty good. The biggest cost comes when there is a long chain of next-methods, because Context
  Lite wraps each ~next-method~ in a closure.

  TODO: small benchmark
* What's works
  + ~declare~-ations and docstrings.
  + Implicit block around method body with correct name.
  + ~setf~ functions.
  + ~call-next-method~.
  + Method redefinitions overwrite the old one.
  + Argument precedence orders, including interaction between normal and special arguments.
* What doesn't work
  + Impossible to find or remove methods.
  + The generic function will signal an error if a special variable used by any method is unbound.
